"""init

Revision ID: 9d6146e29abc
Revises:
Create Date: 2024-11-18 19:01:31.499469

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op

from aiventure.models import (
    AI_MODEL_TYPE_MAPPING,
    LOCATION_MAPPING,
    MODIFIER_TYPE_MAPPING,
    QUALITY_MAPPING,
    ROLE_CATEGORY_MAPPING,
    ROLE_MAPPING,
)


# revision identifiers, used by Alembic.
revision: str = "9d6146e29abc"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    ai_model_types = op.create_table("ai_model_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        ai_model_types,
        [ai_model_type.model_dump() for ai_model_type in AI_MODEL_TYPE_MAPPING.values()],
    )
    modifier_types = op.create_table("modifier_types",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        modifier_types,
        [modifier_type.model_dump() for modifier_type in MODIFIER_TYPE_MAPPING.values()],
    )
    qualities = op.create_table(
        "qualities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("hex_color", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        qualities,
        [quality.model_dump() for quality in QUALITY_MAPPING.values()],
    )
    role_categories = op.create_table(
        "role_categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("hex_color", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        role_categories,
        [role_category.model_dump() for role_category in ROLE_CATEGORY_MAPPING.values()],
    )
    op.create_table(
        "users",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=True)
    op.create_table(
        "modifiers",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["type_id"], ["modifier_types.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "players",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("funds", sa.Float(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"],),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id"),
    )
    op.create_index(op.f("ix_players_id"), "players", ["id"], unique=True)
    roles = op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["role_categories.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        roles,
        [role.model_dump() for role in ROLE_MAPPING.values()],
    )
    op.create_table(
        "labs",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("location", sa.Enum("US", "EU", "ASIA", name="locationenum"), nullable=True),
        sa.Column("valuation", sa.Float(), nullable=False),
        sa.Column("income", sa.Float(), nullable=False),
        sa.Column("tech_tree_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("player_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["player_id"], ["players.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_labs_id"), "labs", ["id"], unique=True)
    locations = op.create_table(
        "locations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("modifier_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["modifier_id"], ["modifiers.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.bulk_insert(
        locations,
        [location.model_dump() for location in LOCATION_MAPPING.values()],
    )
    op.create_table(
        "ai_models",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("ai_model_type_id", sa.Integer(), nullable=False),
        sa.Column("tech_tree_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lab_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["ai_model_type_id"], ["ai_model_types.id"],),
        sa.ForeignKeyConstraint(["lab_id"], ["labs.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_ai_models_id"), "ai_models", ["id"], unique=True)
    op.create_table(
        "employees",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("salary", sa.Integer(), nullable=False),
        sa.Column("image_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("quality_id", sa.Integer(), nullable=False),
        sa.Column("lab_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(["lab_id"], ["labs.id"],),
        sa.ForeignKeyConstraint(["quality_id"], ["qualities.id"],),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_employees_id"), "employees", ["id"], unique=True)
    op.create_table(
        "player_lab_investment_link",
        sa.Column("player_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lab_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("part", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(["lab_id"], ["labs.id"],),
        sa.ForeignKeyConstraint(["player_id"], ["players.id"],),
        sa.PrimaryKeyConstraint("player_id", "lab_id"),
    )
    op.create_table(
        "employee_modifier_link",
        sa.Column("employee_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("modifier_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["employee_id"], ["employees.id"],),
        sa.ForeignKeyConstraint(["modifier_id"], ["modifiers.id"],),
        sa.PrimaryKeyConstraint("employee_id", "modifier_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("employee_modifier_link")
    op.drop_table("player_lab_investment_link")
    op.drop_index(op.f("ix_employees_id"), table_name="employees")
    op.drop_table("employees")
    op.drop_index(op.f("ix_ai_models_id"), table_name="ai_models")
    op.drop_table("ai_models")
    op.drop_table("locations")
    op.drop_index(op.f("ix_labs_id"), table_name="labs")
    op.drop_table("labs")
    op.drop_table("roles")
    op.drop_index(op.f("ix_players_id"), table_name="players")
    op.drop_table("players")
    op.drop_table("modifiers")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_table("role_categories")
    op.drop_table("qualities")
    op.drop_table("modifier_types")
    op.drop_table("ai_model_types")
    # ### end Alembic commands ###
